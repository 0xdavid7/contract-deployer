name: Release

on:
  push:
    tags:
      - 'linux/v*'  # Triggers on version tags like linux/v1.0.0, etc.

env:
  CARGO_TERM_COLOR: always
  BIN_NAME: contract-deployer

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Extract version from tag and update Cargo.toml
        run: |
          # Extract version from tag (remove 'v' prefix if present)
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#linux/v}"  # Remove 'linux/v' prefix if present
          echo "Extracted version: $VERSION"
          
          # Update Cargo.toml with the extracted version
          if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            sed -i '' "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
          else
            # Linux
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
          fi
          
          # Verify the change
          echo "Updated Cargo.toml version:"
          grep "^version = " Cargo.toml

      - name: Install cross for ARM builds
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo install cross --git https://github.com/cross-rs/cross
        
      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build binary
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Package binary
        run: |
          target_dir="target/${{ matrix.target }}/release"
          binary_path="$target_dir/${{ env.BIN_NAME }}"
          
          # Double-check binary exists
          if [ ! -f "$binary_path" ]; then
            echo "❌ Binary not found at $binary_path"
            exit 1
          fi
          
          # Create package directory
          package_name="${{ env.BIN_NAME }}-${{ github.ref_name }}-${{ matrix.target }}"
          mkdir "$package_name"
          
          # Copy binary
          cp "$binary_path" "$package_name/"
          chmod +x "$package_name/${{ env.BIN_NAME }}"
          
          # Copy configuration examples if they exist
          if [ -d "examples" ]; then
            echo "Copying examples directory"
            cp -r examples "$package_name/"
          else
            echo "No examples directory found"
          fi
          
          # Copy documentation if it exists
          if [ -f "README.md" ]; then
            echo "Copying README.md"
            cp README.md "$package_name/"
          else
            echo "No README.md found"
          fi
          
          if [ -f "INSTALLATION.md" ]; then
            echo "Copying INSTALLATION.md"
            cp INSTALLATION.md "$package_name/"
          else
            echo "No INSTALLATION.md found"
          fi
          
          # Create tarball
          tar -czf "$package_name.tar.gz" "$package_name"
          
          # Generate checksum (macOS uses shasum, Linux uses sha256sum)
          echo "Generating checksum for $package_name.tar.gz"
          if command -v sha256sum >/dev/null 2>&1; then
            echo "Using sha256sum (Linux)"
            sha256sum "$package_name.tar.gz" > "$package_name.tar.gz.sha256"
          elif command -v shasum >/dev/null 2>&1; then
            echo "Using shasum (macOS)"
            shasum -a 256 "$package_name.tar.gz" > "$package_name.tar.gz.sha256"
          else
            echo "Neither sha256sum nor shasum found, generating checksum with openssl"
            openssl dgst -sha256 "$package_name.tar.gz" | awk '{print $2 "  " $1}' > "$package_name.tar.gz.sha256"
          fi
          
          # Verify checksum was created
          if [ -f "$package_name.tar.gz.sha256" ]; then
            echo "✅ Checksum created:"
            cat "$package_name.tar.gz.sha256"
          else
            echo "❌ Failed to create checksum"
            exit 1
          fi
          
          # List final artifacts
          echo "Created artifacts:"
          ls -la "$package_name.tar.gz"*
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.BIN_NAME }}-${{ github.ref_name }}-${{ matrix.target }}.tar.gz
            ${{ env.BIN_NAME }}-${{ github.ref_name }}-${{ matrix.target }}.tar.gz.sha256
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}