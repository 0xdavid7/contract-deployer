name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  CARGO_TERM_COLOR: always
  BIN_NAME: contract-deployer

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Auto-increment version and update Cargo.toml
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep "^version = " Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          echo "Parsed version: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
          
          # Determine version bump type
          BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          
          # If triggered by push (not manual), determine bump type from commit messages
          if [ -z "$BUMP_TYPE" ]; then
            echo "Determining version bump from commit messages..."
            
            # Get commit messages since last release
            COMMIT_MESSAGES=$(git log --pretty=format:"%s" HEAD~10..HEAD)
            echo "Recent commit messages:"
            echo "$COMMIT_MESSAGES"
            
            # Check for breaking changes (major bump)
            if echo "$COMMIT_MESSAGES" | grep -i "BREAKING CHANGE\|breaking:" > /dev/null; then
              BUMP_TYPE="major"
            # Check for features (minor bump)
            elif echo "$COMMIT_MESSAGES" | grep -E "^feat(\(.+\))?:" > /dev/null; then
              BUMP_TYPE="minor"
            # Default to patch bump for fixes and other changes
            else
              BUMP_TYPE="patch"
            fi
          fi
          
          echo "Version bump type: $BUMP_TYPE"
          
          # Calculate new version
          case $BUMP_TYPE in
            major)
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            minor)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            patch)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
            *)
              echo "Invalid bump type: $BUMP_TYPE"
              exit 1
              ;;
          esac
          
          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update Cargo.toml with the new version
          if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            sed -i '' "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
          else
            # Linux
            sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
          fi
          
          # Verify the change
          echo "Updated Cargo.toml version:"
          grep "^version = " Cargo.toml
          
          # Export version for use in other steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV

      - name: Install cross for ARM builds
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo install cross --git https://github.com/cross-rs/cross
        
      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build binary
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Package binary
        run: |
          target_dir="target/${{ matrix.target }}/release"
          binary_path="$target_dir/${{ env.BIN_NAME }}"
          
          # Double-check binary exists
          if [ ! -f "$binary_path" ]; then
            echo "❌ Binary not found at $binary_path"
            exit 1
          fi
          
          # Create package directory
          package_name="${{ env.BIN_NAME }}-v${{ env.NEW_VERSION }}-${{ matrix.target }}"
          mkdir "$package_name"
          
          # Copy binary
          cp "$binary_path" "$package_name/"
          chmod +x "$package_name/${{ env.BIN_NAME }}"
          
          # Copy configuration examples if they exist
          if [ -d "examples" ]; then
            echo "Copying examples directory"
            cp -r examples "$package_name/"
          else
            echo "No examples directory found"
          fi
          
          # Copy documentation if it exists
          if [ -f "README.md" ]; then
            echo "Copying README.md"
            cp README.md "$package_name/"
          else
            echo "No README.md found"
          fi
          
          if [ -f "INSTALLATION.md" ]; then
            echo "Copying INSTALLATION.md"
            cp INSTALLATION.md "$package_name/"
          else
            echo "No INSTALLATION.md found"
          fi
          
          # Create tarball
          tar -czf "$package_name.tar.gz" "$package_name"
          
          # Generate checksum (macOS uses shasum, Linux uses sha256sum)
          echo "Generating checksum for $package_name.tar.gz"
          if command -v sha256sum >/dev/null 2>&1; then
            echo "Using sha256sum (Linux)"
            sha256sum "$package_name.tar.gz" > "$package_name.tar.gz.sha256"
          elif command -v shasum >/dev/null 2>&1; then
            echo "Using shasum (macOS)"
            shasum -a 256 "$package_name.tar.gz" > "$package_name.tar.gz.sha256"
          else
            echo "Neither sha256sum nor shasum found, generating checksum with openssl"
            openssl dgst -sha256 "$package_name.tar.gz" | awk '{print $2 "  " $1}' > "$package_name.tar.gz.sha256"
          fi
          
          # Verify checksum was created
          if [ -f "$package_name.tar.gz.sha256" ]; then
            echo "✅ Checksum created:"
            cat "$package_name.tar.gz.sha256"
          else
            echo "❌ Failed to create checksum"
            exit 1
          fi
          
          # List final artifacts
          echo "Created artifacts:"
          ls -la "$package_name.tar.gz"*
      
      - name: Create and push git tag
        if: matrix.build == 'macos-arm64'  # Only run once for the first matrix job
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }} (${{ env.BUMP_TYPE }} bump)"
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          files: |
            ${{ env.BIN_NAME }}-v${{ env.NEW_VERSION }}-${{ matrix.target }}.tar.gz
            ${{ env.BIN_NAME }}-v${{ env.NEW_VERSION }}-${{ matrix.target }}.tar.gz.sha256
          generate_release_notes: true
          draft: false
          prerelease: false
          body: |
            ## Changes
            
            This release includes a **${{ env.BUMP_TYPE }}** version bump from the previous version.
            
            ### Version: v${{ env.NEW_VERSION }}
            ### Bump Type: ${{ env.BUMP_TYPE }}
            
            ## Installation
            
            Download the appropriate binary for your platform from the assets below.
            
            ### Quick Install (macOS/Linux)
            ```bash
            curl -fsSL https://raw.githubusercontent.com/0xdavid7/contract-deployer/main/install.sh | bash
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}